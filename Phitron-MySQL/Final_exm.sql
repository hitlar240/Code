CREATE DATABASE MINI_LIB;

USE MINI_LIB;

CREATE TABLE Student (
    StudentID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Phone VARCHAR(15),
    Address TEXT
);
INSERT INTO STUDENT(NAME,EMAIL,PHONE,ADDRESS) 
	VALUES ('A','a','019','AAAAAA'),('B','b','017','BBBBB'),
			('C','c','013','CCCCC'),('D','d','014','FFFF'),('E','e','015','EEEEE');
SELECT * FROM STUDENT;

CREATE TABLE Book (
    ISBN VARCHAR(13) PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Author VARCHAR(255) NOT NULL,
    Genre VARCHAR(50),
    TotalCopies INT NOT NULL,
    AvailableCopies INT NOT NULL
);
INSERT INTO BOOK(ISBN,TITLE,AUTHOR,TOTALCOPIES,AVAILABLECOPIES) 
	VALUES ('9781234567890','DKJF','DKF',5,5),('9781234567891','UHIU','III',3,3),
			('9781234567892','YYY','OOO',2,2);
SELECT * FROM BOOK;

CREATE TABLE Borrowing (
    BorrowID INT AUTO_INCREMENT PRIMARY KEY,
    StudentID INT,
    ISBN VARCHAR(13),
    BorrowDate DATE NOT NULL,
    DueDate DATE NOT NULL,
    ReturnDate DATE,
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
    FOREIGN KEY (ISBN) REFERENCES Book(ISBN)
);
INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE) 
	VALUES (4,'9781234567892','2024-01-03','2024-10-03'),(5,'9781234567891','2024-01-05','2024-10-05'),
			(2,'9781234567892','2024-01-02','2024-10-02'),(1,'9781234567890','2024-01-01','2024-10-01'),
            (2,'9781234567891','2024-01-02','2024-10-02'),(5,'9781234567890','2024-01-05','2024-10-05');
SELECT * FROM BORROWING;

SET SQL_SAFE_UPDATES = 0;
UPDATE BOOK
SET BOOK.AVAILABLECOPIES = BOOK.AVAILABLECOPIES - (SELECT COUNT(*) -- DECREASE AVAIBLE COPIES
												   FROM BORROWING AS BOR
                                                   GROUP BY BOR.ISBN
                                                   HAVING BOOK.ISBN = BOR.ISBN);
SELECT * FROM BOOK;




-- 2
INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE,RETURNDATE) 
SELECT 3 AS STUDENTID, ISBN, '2024-01-01' AS BORROWDATE, '2024-01-10' AS DUEDATE, '2024-01-10' AS RETURNDATE
FROM BOOK 
ORDER BY AVAILABLECOPIES DESC 
LIMIT 1;

INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE,RETURNDATE) 
	VALUES (3,(SELECT ISBN FROM BOOK ORDER BY AVAILABLECOPIES DESC LIMIT 1),'2024-01-03','2024-10-03','2024-10-03');
SELECT * FROM BORROWING;


SELECT * FROM BOOK;

-- 3
INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE,RETURNDATE) 
	VALUES (4,'9781234567890','2024-01-03','2024-10-03','2024-10-03');
-- SELECT * FROM BORROWING;
UPDATE BOOK 
SET AVAILABLECOPIES = AVAILABLECOPIES - 1
WHERE ISBN = '9781234567890';
SELECT * FROM BOOK;


CREATE TRIGGER DECREASE_AVAILABLE_BOOK
AFTER INSERT ON BORROWING



UPDATE BOOK 
SET AVAILABLECOPIES = AVAILABLECOPIES - 1
WHERE ISBN = (SELECT ISBN -- LAST BORROWED BOOK
			  FROM BORROWING
              ORDER BY BORROWID DESC 
              LIMIT 1);

UPDATE BOOK
SET BOOK.AVAILABLECOPIES = BOOK.AVAILABLECOPIES - (SELECT COUNT(*) -- DECREASE AVAIBLE COPIES
												   FROM BORROWING AS BOR
                                                   GROUP BY BOR.ISBN
                                                   HAVING BOOK.ISBN = BOR.ISBN);

-- 4
SELECT DISTINCT STU.NAME, COUNT(ISBN) AS BORROWED_BOOKS
FROM BORROWING AS BOR
	JOIN STUDENT AS STU
		ON BOR.STUDENTID = STU.STUDENTID
GROUP BY BOR.STUDENTID
HAVING BORROWED_BOOKS  = (SELECT COUNT(ISBN) -- MAX COUNT
						  FROM BORROWING
                          GROUP BY STUDENTID
                          ORDER BY COUNT(ISBN) DESC
                          LIMIT 1);

INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE,RETURNDATE) 
	VALUES (4,'9781234567892','2023-01-03','2023-10-03','2023-10-03'),(5,'9781234567891','2023-01-05','2023-10-05','2023-10-05'),
			(2,'9781234567892','2023-01-02','2023-10-02','2023-10-02');
SELECT * FROM BORROWING;
            
SELECT CURRENT_DATE();

-- 5
SELECT BOR.STUDENTID, BOOK.ISBN, TITLE, AUTHOR, GENRE, RETURNDATE
FROM BORROWING AS BOR
	JOIN BOOK
		ON BOR.ISBN = BOOK.ISBN
WHERE RETURNDATE < CURRENT_DATE();


USE DUMMYDB;

-- 8
SELECT DISTINCT SALARY AS '2ND_LOWEST_SALARY'
FROM EMPLOYEES
ORDER BY SALARY ASC
LIMIT 1,1;



USE SAMPLE;

-- 9
CREATE TABLE DEPARTMENT
(
	DEPARTMENT_ID VARCHAR(10) PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR(50)
);
INSERT INTO DEPARTMENT(DEPARTMENT_ID,DEPARTMENT_NAME) 
	VALUES ('1','A'),('2','B'),('3','C');
SELECT * FROM DEPARTMENT;

CREATE TABLE EMPLOYEE
(
	EMPLOYEE_ID VARCHAR(10) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    DEPARTMENT_ID VARCHAR(10),
    SALARY INT CHECK(SALARY > 0),
    
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
		ON DELETE SET NULL
);
INSERT INTO EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY) 
	VALUES ('101','TOM','2',10),('102','HMM','3',20),('103','TANVIR','1',50);
SELECT* FROM EMPLOYEE;

CREATE TABLE JOB_HISTORY
(
	EMPLOYEE_ID VARCHAR(10),
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    DEPARTMENT_ID VARCHAR(10),
    
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
		ON DELETE CASCADE,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
		ON DELETE SET NULL
);
INSERT INTO JOB_HISTORY(EMPLOYEE_ID,START_DATE,DEPARTMENT_ID)
	VALUES ('101','2023-02-02','2'),('102','2023-03-02','3'),('103','2023-05-02','1');
SELECT * FROM JOB_HISTORY;

DELETE 
FROM DEPARTMENT
WHERE DEPARTMENT_ID = '3';
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB_HISTORY;

DELETE 
FROM EMPLOYEE
WHERE EMPLOYEE_ID = '103';
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB_HISTORY;